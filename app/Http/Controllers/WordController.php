<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\Shared\ZipArchive;
use PhpOffice\PhpWord\TemplateProcessor;

use App\Models\Task;
use App\Models\Goal;
use App\Models\Objective;
use App\Models\Strategy;
use App\Models\Action;
use App\Models\Subaction;

use App\Models\funding;
use App\Models\Expense;


class wordController extends Controller
{
    public function createWordDocument($id)
    {

        $phpWord = new PhpWord();
        $section = $phpWord->addSection();
        $section->addText('Hello, this is a sample Word document generated by Laravel! ' . $id);


        $fileName = 'sample-word-file.docx';
        $tempFile = tempnam(sys_get_temp_dir(), $fileName);
        $objWriter = IOFactory::createWriter($phpWord, 'Word2007');
        $objWriter->save($tempFile);
        return response()->download($tempFile, $fileName)->deleteFileAfterSend(true);
    }

    public function generateWordFromTemplate($id)
    {

        $task = Task::find($id);


        $subaction_id = $task->subaction_id;
        $subaction = Subaction::find($subaction_id);
        $subaction_name = $subaction->name;

        $action_id = $subaction->action_id;
        $action = Action::find($action_id);
        $action_name = $action->name;

        $Strategy_id = $action->strategy_id;
        $strategy = Strategy::find($Strategy_id);
        $strategy_name = $strategy->name;

        $Objective_id = $strategy->objective_id;
        $objective = Objective::find($Objective_id);
        $objective_name = $objective->name;

        $goal_id = $objective->goal_id;
        $goal = Goal::find($goal_id);
        $goal_name = $goal->name;

        $funding = funding::where('task_id', $id)->get();
        $expense = Expense::where('task_id', $id)->get();


        $templateProcessor = new TemplateProcessor(storage_path('app/templates/template.docx'));


        $templateProcessor->setValue('date', now()->format('Y-m-d'));

        $templateProcessor->setValue('goal', $goal_name);
        $templateProcessor->setValue('objective', $objective_name);
        $templateProcessor->setValue('Strategy', $strategy_name);
        $templateProcessor->setValue('action', $action_name);
        $templateProcessor->setValue('subaction', $subaction_name);

        $templateProcessor->setValue('title', $task->Title);
        $templateProcessor->setValue('introduction', $task->introduction);
        $templateProcessor->setValue('note', $task->Note);


        $templateProcessor->cloneRow('fundingId', count($funding));

        foreach ($funding as $index => $found) {
            $rowIndex = $index + 1;
            $templateProcessor->setValue('fundingId#' . $rowIndex, $rowIndex);
            $templateProcessor->setValue('fundingitem#' . $rowIndex, $found->name);
            $templateProcessor->setValue('fundingunit#' . $rowIndex, $found->unit);
            $templateProcessor->setValue('fundingcharge#' . $rowIndex, $found->unit_charge);
            $templateProcessor->setValue('fundingamount#' . $rowIndex, $found->amount);

        }

        $Transports = [];
        $Accommodations = [];
        $Others = [];

        foreach ($expense as $item) {
            switch ($item->Type) {
                case 'Transport':
                    $Transports[] = $item;
                    break;
                case 'Accommodation':
                    $Accommodations[] = $item;
                    break;
                case 'Others':
                    $Others[] = $item;
                    break;
            }
        }
        $fulltotal = $expense->sum('amount');

        $templateProcessor->cloneRow('expId', count($Transports));
        foreach ($Transports as $index => $Transport) {
            $rowIndex = $index + 1;
            $templateProcessor->setValue('expId#' . $rowIndex, $rowIndex);
            $templateProcessor->setValue('expName#' . $rowIndex, $Transport->name);
            $templateProcessor->setValue('expNOv#' . $rowIndex, $Transport->no_unit);
            $templateProcessor->setValue('expkm#' . $rowIndex, $Transport->totalKM);
            $templateProcessor->setValue('expunit#' . $rowIndex, $Transport->unit_cost);
            $templateProcessor->setValue('expTotal#' . $rowIndex, $Transport->amount);
        }



        $templateProcessor->cloneRow('traNo', count($Accommodations));
        foreach ($Accommodations as $index => $Accommodation) {
            $rowIndex = $index + 1;

            $templateProcessor->setValue('traNo#' . $rowIndex, $rowIndex);
            $templateProcessor->setValue('traName#' . $rowIndex, $Accommodation->name);
            $templateProcessor->setValue('traNof#' . $rowIndex, $Accommodation->no_unit);
            $templateProcessor->setValue('traNoD#' . $rowIndex, $Accommodation->no_days);
            $templateProcessor->setValue('traTotal#' . $rowIndex, $Accommodation->amount);
        }


        $templateProcessor->cloneRow('otherNo', count($Others));
        foreach ($Others as $index => $Other) {
            $rowIndex = $index + 1;
            $templateProcessor->setValue('otherNo#' . $rowIndex, $rowIndex);
            $templateProcessor->setValue('othername#' . $rowIndex, $Other->name);
            $templateProcessor->setValue('otherqty#' . $rowIndex, $Other->no_unit);
            $templateProcessor->setValue('othernofd#' . $rowIndex, $Other->no_days);
            $templateProcessor->setValue('othercost#' . $rowIndex, $Other->unit_cost);
            $templateProcessor->setValue('othertotal#' . $rowIndex, $Other->amount);

        }

        $templateProcessor->setValue('fulltotal', $fulltotal);

        $fileName = 'updated-template.docx';


        $tempFile = tempnam(sys_get_temp_dir(), $fileName);
        $templateProcessor->saveAs($tempFile);


        return response()->download($tempFile, $fileName)->deleteFileAfterSend(true);
    }
}
